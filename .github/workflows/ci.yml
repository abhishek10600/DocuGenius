name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17.2
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: documentqa_test
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready -U postgres" --health-timeout=30s --health-retries=3
      redis:
        image: redis:7
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Create .env file dynamically
      - name: Create .env file for Django
        run: |
          cat <<EOF > documentqa_backend/.env
          DJANGO_SECRET_KEY=${{ secrets.SECRET_KEY }}
          POSTGRES_USER={{secrets.POSTGRES_USER}}
          POSTGRES_PASSWORD={{secrets.POSTGRES_PASSWORD}}
          POSTGRES_DB={{secrets.DATABASENAME}}
          POSTGRES_HOST=localhost
          POSTGRES_PORT=5432
          EOF

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'

      # Install backend dependencies
      - name: Install backend dependencies
        run: |
          cd documentqa_backend
          pip install -r requirements.txt

      # Run Django migrations
      - name: Run Django migrations
        run: |
          cd documentqa_backend
          python manage.py migrate

      # Run backend tests
      - name: Run backend tests
        run: |
          cd documentqa_backend
          python manage.py test

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      # Install frontend dependencies
      - name: Install frontend dependencies
        run: |
          cd documentqa_frontend
          npm install

      # Run frontend tests
      - name: Run frontend tests
        run: |
          cd documentqa_frontend
          npm test
